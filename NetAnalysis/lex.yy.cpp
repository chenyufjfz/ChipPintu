#line 2 "lex.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
static yyconst short int yy_accept[313] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,   44,   42,   37,   44,   44,    2,    1,   44,    5,
        8,    9,    7,    6,   11,   12,   10,   39,   39,   38,
       39,   36,   36,   44,   20,   35,   44,    5,   14,    8,
        9,    7,   16,    6,   17,   15,   11,   12,   10,   18,
       32,   44,   35,   44,   20,   31,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   30,   20,
       35,   30,   35,   35,   35,   29,   29,   35,   35,   35,

       35,   35,   40,   40,   40,    2,   44,   44,   33,   35,
       34,   34,   35,   35,   35,   34,   35,   35,   35,    0,
        0,   42,   37,    0,    0,   41,    0,   43,    0,    0,
        5,    8,    9,    7,    6,   11,   12,   10,   38,    0,
       36,    0,   21,   21,    0,   21,   20,   21,   36,   21,
       21,   36,   35,   35,   21,    0,    5,   14,    8,    9,
        7,   16,    6,   17,   15,   11,   12,   10,   18,   32,
       24,   21,   20,   21,    0,   21,   21,    0,   31,   23,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   30,   30,   20,   35,   26,   30,   29,

       35,   27,   35,   35,   29,   35,   33,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   34,   35,   35,    0,
        0,    0,    0,   36,   21,   36,   36,   21,   36,   36,
       21,    0,   21,   21,    0,    0,    0,   21,    0,    0,
       21,    0,    0,   36,   23,   36,   36,   36,   36,   36,
       36,   30,   25,   35,   35,   35,   35,   34,   34,   35,
       35,   34,   35,    0,    0,    0,   21,   19,   36,    0,
       21,    0,    0,   21,    0,    0,   19,    0,   36,   36,
       22,   36,   36,   36,   30,   35,   35,   28,   35,    0,
        0,   19,   19,    0,    0,   19,   19,    0,    4,   36,

       36,   22,   35,   35,   13,    0,   36,   36,   35,   35,
        3,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    1,    1,    1,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   14,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        7,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,   41,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[42] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    2,    3,
        1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static yyconst short int yy_base[350] =
    {   0,
        0,    8,   48,   54,   61,   75,  116,  128,  140,    0,
      173,    0,  199,    0,  226,    0, 1050, 1049,  254,  280,
      306,  334,  356,    0,  153,  160,  393,  405,  417,    0,
     1084, 1087, 1087,   50,  166, 1080, 1087, 1087,  162,    0,
        0,    0,    0,    0,    0,    0,    0, 1087, 1087,  169,
      187,    0,  183,  179,  454,  238,  268,  264,  287,  293,
      301,  313,  319,  327,  341,  347,  355,  368,  491,  497,
        0,  235,  249,  264,  499,    0, 1065,  234, 1043, 1057,
     1062,  235, 1055, 1045, 1061, 1046, 1059, 1058,  531,  266,
      321,  533,  539,  357,  295,  349,  499,  544,  549,  550,

      558,  566, 1087, 1087,  281, 1087,  457,  388,    0,    0,
     1039,    0, 1037,  550,  562, 1051, 1032, 1036, 1034,  513,
      494, 1087,  578,  527, 1063, 1087, 1062, 1087,  305,  352,
        0,    0,    0,    0,    0,    0,    0,    0,  588,  561,
        0,  580,  582,  587, 1036, 1044,    0,    0,  594,  594,
      596, 1040,  608,    0,  628,  522,  623,  660,  666,  672,
      678,  684,  690,  696,  702,  708,  714,  720,  726,    0,
      617,  597,    0, 1087,  730,  730,  615, 1039,    0,    0,
     1043, 1026, 1028, 1029, 1022, 1029, 1028, 1025, 1033, 1021,
     1024, 1033, 1022,  635,  732,  611,  742,  744,  755,  763,

      764,  765,  773,  774,  783,  785,    0, 1010, 1014, 1025,
      352, 1016, 1023,  631, 1012, 1008,    0, 1023,  991,  534,
      155,  789,  947,  653,  794,  899,  899,  890,  892,  890,
      913,  801,  813,  847,  544,  570,  660,  666,  893,  893,
      884,  885,  883,  875,    0,  875,  876,  875,  861,  855,
      844,  791,  812,  813,  818,  827,  862,    0,    0,  828,
      822,    0,  814,  496,  372,  678,  684,  841,  802,  806,
      690,  712,  502,  719,  633,  683,  849,  800,  760,  768,
        0,  756,  727,  714,  849,  851,  866,  829,  687,  758,
      643,  882,  724,  861,  752,  885,  887,  891,  713,  634,

      635,  887,  893,  622,  609,  870,  591,  583,  894,  538,
      536, 1087,  922,  927,  932,  937,  942,  947,  952,  957,
      457,  333,  322,  316,  281,  237,  183,  180,  961,  965,
      969,  973,  977,  981,  985,  989,  993,  997, 1001, 1005,
     1009, 1013, 1017, 1020,   55, 1024, 1028, 1031, 1034
    } ;

static yyconst short int yy_def[350] =
    {   0,
      313,  312,  314,  314,  315,  312,  316,  316,  315,    9,
      313,   11,  312,   13,   13,   15,   15,   15,    9,    9,
        9,    9,    9,   23,  317,  317,  318,  318,  312,   29,
      312,  312,  312,  312,  312,  319,  312,  312,  320,  321,
      322,  323,  324,  325,  326,  327,  328,  312,  312,  312,
      312,  329,  329,  312,  312,  330,  320,  331,  332,  333,
      334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
      344,  312,  330,  312,  312,  345,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  346,  329,
      330,  347,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  312,  312,  312,  312,  312,  312,  348,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  312,
      312,  312,  312,  312,  319,  312,  320,  312,  320,  320,
      321,  322,  323,  324,  325,  326,  327,  328,  312,  312,
      329,  312,   55,   75,  312,  144,   55,  329,  329,  329,
      150,  329,  330,  349,  320,  320,  331,  332,  333,  334,
      335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
      330,   75,   75,  312,  312,  312,  176,  312,  345,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  346,  346,  329,  330,  330,  347,  330,

      330,  330,  330,  330,  330,  330,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  320,
      320,  312,  312,  329,   55,  329,  329,  329,  329,  329,
      320,  320,  320,  320,  320,  320,  312,  144,  312,  312,
      312,  312,  312,  329,  329,  329,  329,  329,  329,  329,
      329,  346,  330,  330,  330,  330,  349,  349,  349,  349,
      349,  349,  349,  320,  320,  312,  238,  312,  329,  320,
      155,  320,  320,  320,  320,  320,  320,  312,  329,  329,
      329,  329,  329,  329,  346,  330,  330,  330,  349,  320,
      320,  312,  312,  312,  320,  320,  312,  320,  320,  329,

      329,  346,  330,  349,  320,  320,  329,  329,  330,  349,
      320,    0,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312
    } ;

static yyconst short int yy_nxt[1129] =
    {   0,
      312,   33,   34,   35,   36,   37,   33,   37,   32,   33,
       34,   35,   36,   37,   33,   38,   32,   32,   39,   32,
       32,   32,   32,   32,   40,   32,   41,   42,   41,   42,
       43,   32,   44,   40,   32,   32,   32,   32,   32,   40,
       45,   32,   32,   43,   46,   47,   32,   32,   32,   49,
       50,   51,  120,  121,   49,   49,   50,   51,  122,  179,
       49,   32,   33,   34,   35,   52,   37,   33,   37,   53,
       53,   54,   32,   55,   55,   32,   33,   34,   35,   52,
       37,   33,   38,   53,   53,   57,   32,   55,   55,   56,
       56,   58,   59,   60,   61,   60,   61,   62,   63,   64,

       58,   65,   56,   56,   56,   66,   58,   67,   56,   56,
       62,   68,   69,   56,   70,   56,   32,   33,   34,   35,
       32,   37,   33,   37,   32,   32,   32,   32,   32,   33,
       34,   35,   32,   37,   33,   37,   32,   32,   32,   32,
       32,   33,   34,   35,   52,   37,   33,   37,   53,   53,
       72,   32,   55,   55,  104,   34,  105,  128,  106,  104,
      106,  104,   34,  105,  128,  106,  104,  106,  123,  124,
      265,  120,  121,   73,   33,   34,   35,  122,   37,   33,
       37,   74,   74,   72,  138,   75,   75,  137,  129,  139,
      140,  144,  144,  142,  130,  143,  143,  145,   76,   32,

       33,   34,   35,   52,   37,   33,   37,   53,   53,   72,
       32,   55,   55,   77,   52,   52,   78,   79,   52,   52,
       52,   52,   52,   52,   80,   52,   52,   81,   82,   52,
       52,   83,   52,   52,   52,   52,   52,   52,   52,   52,
       52,  136,  141,   52,   52,   84,  141,  144,  144,  154,
      180,   85,  181,  141,   52,   86,  182,  141,   52,   87,
      154,   88,   52,   52,   32,  171,   90,   90,  141,  186,
      128,  187,  141,  153,  142,  154,  172,  172,  196,  196,
      155,  155,   91,  123,  124,  135,  156,   56,   52,   52,
       32,  141,   90,   90,  129,  141,  153,  141,  154,  141,

      130,  141,  153,  141,  154,  141,  154,  128,   91,  141,
      153,  202,  154,   56,   52,   52,   32,  141,   90,   90,
      134,  141,  153,  141,  154,  141,  133,  141,  153,  141,
      154,  141,  154,  220,   91,  141,  153,  132,  154,   56,
      197,   92,   52,   52,   32,  141,   90,   90,  198,  141,
      153,  141,  154,  141,  128,  141,  153,  141,  154,  141,
      154,  141,   91,  141,  153,  141,  154,   56,  154,   92,
       93,  259,  141,   94,  128,  201,  141,  153,   95,  154,
      260,   96,   97,   98,   99,  100,  221,  101,  291,  102,
      120,  121,   96,   32,   33,  107,  108,   32,   37,   33,

       37,   32,   32,   32,   32,   32,   33,  107,  108,   32,
       37,   33,   37,   32,   32,   32,   32,   32,   33,  107,
      108,   32,   37,   33,   37,   32,   32,   32,   32,   32,
       32,  110,  110,  111,  112,  110,  110,  110,  110,  110,
      110,  110,  113,  110,  114,  110,  115,  110,  116,  117,
      110,  118,  119,  110,  110,  110,  110,  110,  141,  120,
      121,  131,  141,  141,  146,  122,  147,  147,  148,  141,
      141,  141,  149,  150,  150,  148,  141,  141,  150,  141,
      151,  150,  152,  150,  141,  141,  148,  150,  150,  148,
      141,  141,  141,  141,  141,  141,  120,  121,  128,  141,

      153,  141,  154,  141,  128,  141,  153,  141,  154,  146,
      154,  173,  173,  174,  290,  120,  121,  175,  176,  176,
      174,  122,  233,  176,  128,  177,  176,  178,  176,  123,
      124,  174,  176,  176,  174,  141,  128,  141,  128,  141,
      141,  141,  153,  141,  154,  195,  128,  141,  141,  236,
      154,  264,  141,  141,  141,  154,  200,  141,  141,  262,
      154,  154,  141,  139,  140,  276,  141,  200,  197,  154,
      141,  200,  128,  210,  141,  203,  211,  154,  204,  212,
      120,  121,  200,  205,  206,  213,  122,  277,  214,  215,
      120,  121,  144,  144,  143,  143,  122,  312,  205,  144,

      144,  281,  224,  224,  180,  222,  225,  225,  148,  172,
      172,  128,  141,  148,  227,  148,  141,  228,  229,  154,
      226,  141,  152,  196,  196,  141,  148,  141,  154,  148,
      128,  141,  153,  240,  154,  128,  241,  242,  310,  141,
      155,  155,  231,  141,  141,  128,  232,  233,  233,  231,
      259,  308,  233,  307,  234,  233,  235,  233,  233,  261,
      231,  233,  233,  231,  141,  225,  225,  306,  141,  153,
      141,  154,  238,  238,  141,  153,  141,  154,  238,  238,
      141,  153,  141,  154,  312,  128,  141,  153,  141,  154,
      267,  267,  141,  153,  141,  154,  267,  267,  141,  153,

      141,  154,  271,  271,  141,  153,  141,  154,  127,  231,
      141,  153,  141,  154,  128,  128,  141,  153,  141,  154,
      304,  128,  141,  153,  141,  154,  293,  294,  141,  153,
      141,  154,  281,  295,  141,  153,  141,  154,  237,  237,
      141,  141,  238,  238,  174,  281,  141,  231,  141,  174,
      141,  174,  141,  154,  128,  154,  239,  252,  178,  141,
      128,  253,  174,  141,  153,  174,  154,  141,  141,  141,
      301,  141,  141,  141,  154,  154,  154,  141,  141,  254,
      231,  141,  141,  305,  154,  154,  245,  141,  300,  141,
      200,  141,  255,  141,  154,  141,  154,  266,  266,  141,

      141,  267,  267,  128,  312,  200,  225,  225,  128,  270,
      270,  256,  141,  271,  271,  128,  141,  141,  271,  271,
      141,  141,  141,  154,  154,  285,  141,  231,  174,  154,
      148,  141,  231,  141,  231,  141,  289,  141,  154,  272,
      154,  235,  292,  293,  294,  231,  287,  286,  231,  128,
      296,  297,  298,  141,  259,  141,  288,  141,  141,  141,
      259,  231,  154,  293,  294,  273,  231,  302,  274,  275,
      141,  200,  128,  272,  141,  235,  217,  154,  284,  231,
      283,  299,  231,  292,  293,  294,  296,  297,  298,  293,
      294,  141,  303,  297,  298,  141,  141,  141,  141,  281,

      282,  141,  141,  311,  154,  154,  281,  280,  279,  174,
      176,  205,  174,  176,  278,  128,  148,  150,  148,  150,
      269,  309,   32,   32,   32,   32,   32,   48,   48,   48,
       48,   48,   56,   56,   56,   56,   56,   71,   71,   71,
       71,   71,  103,  103,  103,  103,  103,  109,  109,  109,
      109,  109,  125,  125,  125,  125,  125,  127,  127,  127,
      127,  127,  141,  141,  268,  141,  153,  153,  153,  153,
      157,  157,  157,  157,  158,  158,  158,  158,  159,  159,
      159,  159,  160,  160,  160,  160,  161,  161,  161,  161,
      162,  162,  162,  162,  163,  163,  163,  163,  164,  164,

      164,  164,  165,  165,  165,  165,  166,  166,  166,  166,
      167,  167,  167,  167,  168,  168,  168,  168,  169,  169,
      169,  169,  170,  170,  170,  194,  194,  263,  194,  199,
      199,  199,  199,  207,  207,  207,  154,  154,  154,  217,
      262,  258,  258,  258,  258,  257,  217,  251,  250,  249,
      248,  247,  245,  245,  246,  180,  180,  245,  244,  180,
      243,  230,  312,  223,  128,  126,  219,  218,  217,  216,
      209,  208,  193,  192,  191,  190,  189,  188,  185,  184,
      183,  180,  126,  312,   89,   89,   31,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312
    } ;

static yyconst short int yy_chk[1129] =
    {   0,
        0,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        3,    3,   34,   34,    3,    4,    4,    4,   34,  345,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   25,   25,   25,  221,   25,   25,
       25,   26,   26,   26,   39,   26,   26,   26,   35,   35,
      221,   50,   50,    9,   11,   11,   11,   50,   11,   11,
       11,   11,   11,   11,  328,   11,   11,  327,   39,   51,
       51,   54,   54,   53,   39,   53,   53,   54,   11,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,  326,   56,   15,   15,   15,   56,   72,   72,   56,
       78,   15,   78,   73,   15,   15,   78,   73,   15,   15,
       73,   15,   19,   19,   19,   73,   19,   19,   58,   82,
       57,   82,   58,   58,   74,   58,   74,   74,   90,   90,
       57,   57,   19,  105,  105,  325,   57,   19,   20,   20,
       20,   59,   20,   20,   57,   59,   59,   60,   59,   95,

       57,   60,   60,   95,   60,   61,   95,  129,   20,   61,
       61,   95,   61,   20,   21,   21,   21,   62,   21,   21,
      324,   62,   62,   63,   62,   91,  323,   63,   63,   91,
       63,   64,   91,  129,   21,   64,   64,  322,   64,   21,
       91,   21,   22,   22,   22,   65,   22,   22,   91,   65,
       65,   66,   65,   96,  130,   66,   66,   96,   66,   67,
       96,   94,   22,   67,   67,   94,   67,   22,   94,   22,
       23,  211,   68,   23,  265,   94,   68,   68,   23,   68,
      211,   23,   23,   23,   23,   23,  130,   23,  265,   23,
      108,  108,   23,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   55,  107,
      107,  321,   55,   55,   55,  107,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   69,  121,  121,  264,   69,

       69,   70,   69,   97,  273,   70,   70,   97,   70,   75,
       97,   75,   75,   75,  264,  120,  120,   75,   75,   75,
       75,  120,  273,   75,  156,   75,   75,   75,   75,  124,
      124,   75,   75,   75,   75,   89,  220,   92,  311,   89,
       89,   92,   92,   93,   92,   89,  235,   93,   98,  156,
       93,  220,   98,   99,  100,   98,   93,   99,  100,  310,
       99,  100,  101,  140,  140,  235,  101,  100,   99,  101,
      102,   93,  236,  114,  102,   98,  114,  102,  101,  114,
      123,  123,  100,  102,  102,  115,  123,  236,  115,  115,
      139,  139,  142,  142,  143,  143,  139,  144,  102,  144,

      144,  308,  149,  149,  307,  144,  149,  149,  150,  172,
      172,  305,  153,  150,  151,  150,  153,  151,  151,  153,
      150,  171,  150,  196,  196,  171,  150,  157,  171,  150,
      155,  157,  157,  177,  157,  275,  177,  177,  304,  194,
      155,  155,  155,  194,  194,  291,  155,  155,  155,  155,
      214,  301,  155,  300,  155,  155,  155,  155,  275,  214,
      155,  155,  155,  155,  158,  224,  224,  291,  158,  158,
      159,  158,  237,  237,  159,  159,  160,  159,  238,  238,
      160,  160,  161,  160,  238,  276,  161,  161,  162,  161,
      266,  266,  162,  162,  163,  162,  267,  267,  163,  163,

      164,  163,  271,  271,  164,  164,  165,  164,  271,  276,
      165,  165,  166,  165,  272,  299,  166,  166,  167,  166,
      289,  274,  167,  167,  168,  167,  293,  293,  168,  168,
      169,  168,  284,  272,  169,  169,  195,  169,  175,  175,
      195,  195,  175,  175,  176,  283,  197,  274,  198,  176,
      197,  176,  198,  197,  295,  198,  176,  195,  176,  199,
      290,  197,  176,  199,  199,  176,  199,  200,  201,  202,
      282,  200,  201,  202,  200,  201,  202,  203,  204,  201,
      295,  203,  204,  290,  203,  204,  280,  205,  279,  206,
      203,  205,  204,  206,  205,  252,  206,  222,  222,  252,

      252,  222,  222,  232,  225,  203,  225,  225,  270,  232,
      232,  206,  225,  232,  232,  233,  253,  254,  270,  270,
      253,  254,  255,  253,  254,  252,  255,  233,  278,  255,
      269,  256,  233,  288,  233,  256,  263,  288,  256,  233,
      288,  233,  268,  268,  268,  233,  255,  254,  233,  234,
      277,  277,  277,  285,  261,  286,  256,  285,  285,  286,
      260,  234,  286,  294,  294,  234,  234,  285,  234,  234,
      287,  286,  306,  234,  287,  234,  257,  287,  251,  234,
      250,  277,  234,  292,  292,  292,  296,  296,  296,  297,
      297,  302,  287,  298,  298,  302,  302,  303,  309,  249,

      248,  303,  309,  306,  303,  309,  247,  246,  244,  243,
      242,  309,  241,  240,  239,  231,  230,  229,  228,  227,
      226,  303,  313,  313,  313,  313,  313,  314,  314,  314,
      314,  314,  315,  315,  315,  315,  315,  316,  316,  316,
      316,  316,  317,  317,  317,  317,  317,  318,  318,  318,
      318,  318,  319,  319,  319,  319,  319,  320,  320,  320,
      320,  320,  329,  329,  223,  329,  330,  330,  330,  330,
      331,  331,  331,  331,  332,  332,  332,  332,  333,  333,
      333,  333,  334,  334,  334,  334,  335,  335,  335,  335,
      336,  336,  336,  336,  337,  337,  337,  337,  338,  338,

      338,  338,  339,  339,  339,  339,  340,  340,  340,  340,
      341,  341,  341,  341,  342,  342,  342,  342,  343,  343,
      343,  343,  344,  344,  344,  346,  346,  219,  346,  347,
      347,  347,  347,  348,  348,  348,  349,  349,  349,  218,
      216,  215,  213,  212,  210,  209,  208,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      178,  152,  146,  145,  127,  125,  119,  118,  117,  116,
      113,  111,   88,   87,   86,   85,   84,   83,   81,   80,
       79,   77,   36,   31,   18,   17,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 ".\\spice.l"
#define INITIAL 0
#line 2 ".\\spice.l"
#include "spice.tab.hpp"
#include <string>
#define YY_NEVER_INTERACTIVE 1
using namespace std;
/* Source functions */
/* Device Models */
/* MOS specific device properties */
/* analog behavioural */
#define COMMENT 1
#define STARTUP 2
#define SUBCKT 3
#define RLCPROP 4
#define LREF 5
#define FUNREF 6
#define GEVALS 7
#define FHVALS 8
#define VSWITCH 9
#define ISWITCH 10
#define DEVPROP 11
#define IGNORE 12
 
#define MODREF1 13
#define MODREF2 14

#line 747 "lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 53 ".\\spice.l"

#line 903 "lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 313 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1087 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 54 ".\\spice.l"
{ /* ignored region begins here */  BEGIN(COMMENT);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 ".\\spice.l"
{
					    /* ignored inline region begins here (3f5, 2g6 and hspice) */
					    BEGIN(IGNORE);
					  	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 ".\\spice.l"
{
	    		/* subcircuit definition start */
	    		BEGIN(SUBCKT);
	    		return SUBCKT_Action;
				}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 ".\\spice.l"
{ 
				/* subcircuit definition end */
	    		BEGIN(SUBCKT);
	    		return ENDS_Action;
				}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 ".\\spice.l"
{ 
				/* R, L and C instances */
				BEGIN(RLCPROP);
				return RLC_Device;
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 ".\\spice.l"
{ 
				/* Mutual inductor instances */
    			BEGIN(LREF);
    			return K_Device;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 ".\\spice.l"
{
    			/* voltage and current source instances */
			    BEGIN(FUNREF);
			    return IV_Source;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 ".\\spice.l"
{
			    /* voltage controlled source instances */
			    BEGIN(GEVALS);
			    return GE_Source;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 89 ".\\spice.l"
{
			    /* current controlled source instances */
			    BEGIN(FHVALS);
			    return FH_Source;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 ".\\spice.l"
{ 
				/* subcircuit instances */
			    BEGIN(STARTUP);
			    return X_Device;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 ".\\spice.l"
{ 
				/* voltage controlled switch */
			    BEGIN(VSWITCH);
			    return S_Device;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 ".\\spice.l"
{ 
				/* current controlled switch */
			    BEGIN(ISWITCH);
			    return W_Device;
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 109 ".\\spice.l"
{ 
				/* device Model definitions */
			    BEGIN(MODREF1);
			    return MODEL_Action;
				}			
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 ".\\spice.l"
{ 
				/* diode instances */				    
			    BEGIN(DEVPROP);
			    return Diode_Device;
				}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 ".\\spice.l"
{ 
				/* BJT instances */				    
			    BEGIN(DEVPROP);
			    return Bipolar_Device;
				}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 124 ".\\spice.l"
{ 
				/* JFET instances */				    
			    BEGIN(DEVPROP);
			    return JFET_Device;
				}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 129 ".\\spice.l"
{ 
				/* MOSFET instances */				    
			    BEGIN(DEVPROP);
			    return MOSFET_Device;
				}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 134 ".\\spice.l"
{ 
				/* MESFET instances */				    
			    BEGIN(DEVPROP);
			    return MESFET_Device;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 ".\\spice.l"
{ 
				/* identify end of netlist */
				return End;
				}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 ".\\spice.l"
{
				/* identify node (containing digits) */
				return Digits;
				}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 148 ".\\spice.l"
{
			    /* identify float (any kind) */
			    return Floats;
				}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 ".\\spice.l"
{
				/* identify analog behaviour */
				BEGIN(IGNORE);
				}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 157 ".\\spice.l"
{ 
				/* function specials (e.g. in sources) */
    			return Function;
				}									
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 161 ".\\spice.l"
{ 
				/* a TC special */
				return TC_Special;
				}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 165 ".\\spice.l"
{ 
				/* a device special */
    		    return OFF_Special;
				}		
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 169 ".\\spice.l"
{ 
				/* a device special */
    			return ON_Special;
				}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 173 ".\\spice.l"
{ 
				/* another device special */
    			return IC_Special;
				}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 177 ".\\spice.l"
{ 
				/* another device special */
    			return TEMP_Special;
				}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 181 ".\\spice.l"
{ 
				/* another device special */
    			return MOS_Special;
				}							
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 185 ".\\spice.l"
{ 
				/* voltage source references */
			    return V_Source;
				}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 189 ".\\spice.l"
{ 
				/* inductor references */
				return L_Device;
				}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 193 ".\\spice.l"
{ 
				/* arbitrary identifier */
			    BEGIN(STARTUP);
			    return Identifier;
				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 198 ".\\spice.l"
{ 
				/* arbitrary identifier */
    			BEGIN(MODREF2);
    			return Identifier;
				}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 203 ".\\spice.l"
{ 
				/* Model specification specials */
    			BEGIN(STARTUP);
    			return MODEL_Spec;
				}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 208 ".\\spice.l"
{ 
				/* arbitrary identifier */
				return Identifier;
				}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 212 ".\\spice.l"
{
    			/* identify node */
    			return Nodes;
				}						
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 216 ".\\spice.l"
{ 
				/* skipping ends here */ 
				BEGIN(STARTUP);  
				return Eol;
				}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 221 ".\\spice.l"
{ BEGIN(STARTUP); /* skipping ends here */ }				
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 222 ".\\spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 223 ".\\spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 ".\\spice.l"
{ /* any thing after '#' is a comment */ }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 225 ".\\spice.l"
{
				/* skip spaces, '=', '(', ')', ',' and the leading '+' */
				}
	YY_BREAK
case 43:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 228 ".\\spice.l"
{ /*  Ignore */}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 229 ".\\spice.l"
ECHO;
	YY_BREAK
#line 1343 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STARTUP):
case YY_STATE_EOF(SUBCKT):
case YY_STATE_EOF(RLCPROP):
case YY_STATE_EOF(LREF):
case YY_STATE_EOF(FUNREF):
case YY_STATE_EOF(GEVALS):
case YY_STATE_EOF(FHVALS):
case YY_STATE_EOF(VSWITCH):
case YY_STATE_EOF(ISWITCH):
case YY_STATE_EOF(DEVPROP):
case YY_STATE_EOF(IGNORE):
case YY_STATE_EOF(MODREF1):
case YY_STATE_EOF(MODREF2):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 313 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 313 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 312);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 229 ".\\spice.l"


int prepare(string filename) {
    if ( (yyin = fopen(filename.c_str(),"r")) == 0 ) {
        perror(filename.c_str());
        exit(1);
    }
    return 0;
}

int yywrap() {
	return 1;
}